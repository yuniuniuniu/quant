#
# MDS API接口库的配置文件样例
#

##############################################
# 客户端配置
#
# UDP行情组播频道说明:
# - udpServer.Snap1: 快照-频道1, 上海L1/L2快照
# - udpServer.Snap2: 快照-频道2, 深圳L1/L2快照
# - udpServer.Tick1: 逐笔-频道1, 上海逐笔成交/逐笔委托
# - udpServer.Tick2: 逐笔-频道2, 深圳逐笔成交/逐笔委托
#
# 示例, 如何启用对UDP行情数据的本地行情订阅和过滤功能 (仅对异步API有效):
# - [mds_client.async_api]
#   isUdpFilterable = yes
#
# 示例, 如何为不同组播频道分别设置不同的订阅列表:
# - [mds_client]
#   udpServer.Snap1.sse.stock.instrs = 600000, 600096, ...
#   udpServer.Snap1.sse.index.instrs = ...
#   udpServer.Snap1.sse.option.instrs = ...
#   udpServer.Tick1.sse.stock.instrs = ...
#   udpServer.Snap2.szse.stock.instrs = ...
#   udpServer.Tick2.szse.stock.instrs = ...
##############################################

[mds_client]
#udpServer.Snap1 = udp-mcast://232.200.151.100:5301
#udpServer.Snap2 = udp-mcast://232.200.152.100:5302
#udpServer.Tick1 = udp-mcast://232.200.153.100:5303
#udpServer.Tick2 = udp-mcast://232.200.154.100:5304

tcpServer = tcp://139.196.228.232:5103, tcp://192.168.0.11:5101
qryServer = tcp://139.196.228.232:5203, tcp://192.168.0.11:5201

username = XXX
# 密码支持明文和MD5两种格式 (如 txt:XXX 或 md5:XXX..., 不带前缀则默认为明文)
password = XXX
heartBtInt = 30

sse.stock.enable = true
#sse.stock.instrs = 600096, 601933

sse.index.enable = true
sse.index.instrs =

sse.option.enable = true
#sse.option.instrs = 10000001, 11001996

szse.stock.enable = true
szse.stock.instrs =

szse.index.enable = true
szse.index.instrs =

szse.option.enable = true
szse.option.instrs =

# 订阅模式 (0: 设置为订阅列表中的股票, 1: 增加订阅列表中的股票, 2: 删除订阅列表中的股票)
mktData.subMode = 0

# 数据模式 (0: 订阅最新快照并跳过过时数据, 1: 订阅最新快照并立即发送, 2: 订阅所有时点的行情快照)
mktData.tickType = 1

# 逐笔数据的过期时间类型 (0: 不过期, 1: 立即过期 (若落后于快照1秒则视为过期), 2: 及时过期 (3秒), 3: 超时过期 (30秒))
# 仅对压缩行情端口生效, 普通的非压缩行情端口不支持该选项
#mktData.tickExpireType = 0

# 逐笔数据的数据重建标识 (标识是否订阅重建到的逐笔数据. 0: 不订阅重建到的逐笔数据, 1: 订阅重建到的逐笔数据, 2: 只订阅重建到的逐笔数据)
mktData.tickRebuildFlag = 0

# 订阅的数据种类
# (0:所有, 1:L1快照/指数/期权, 2:L2快照, 4:L2委托队列, 8:逐笔成交,
#  0x10:深交所逐笔委托, 0x20:上交所逐笔委托, 0x40:L2市场总览,
#  0x100:市场状态, 0x200:证券实时状态, 0x400:指数行情, 0x800:期权行情)
# 要订阅多个数据种类, 可以用逗号或空格分隔, 或者设置为并集值, 如:
# "mktData.dataTypes = 1,2,4" 或等价的 "mktData.dataTypes = 0x07"
mktData.dataTypes = 0

# 请求订阅的行情数据的起始时间 (格式: HHMMSS 或 HHMMSSsss)
# (-1: 从头开始获取, 0: 从最新位置开始获取实时行情, 大于0: 从指定的起始时间开始获取)
mktData.beginTime = 0

# 在推送实时行情数据之前, 是否需要推送已订阅产品的初始的行情快照
mktData.isRequireInitialMktData = 0

# 行情服务器集群的集群类型 (1: 基于复制集的高可用集群, 2: 基于对等节点的服务器集群, 0: 默认为基于复制集的高可用集群)
clusterType = 0

# 套接字参数配置 (可选配置)
soRcvbuf = 8192
soSndbuf = 1024
connTimeoutMs = 5000
tcpNodelay = 1
quickAck = 1
keepalive = 1
keepIdle = 60
keepIntvl = 5
keepCnt = 9
#mcastInterfaceIp = 192.168.0.11        # 用于接收组播数据的网络设备接口的IP地址
#localSendingIp = 192.168.0.11          # 本地绑定的网络设备接口的IP地址 (适用于发送端)
#localSendingPort = 7001                # 本地绑定的端口地址 (适用于发送端)


##############################################
# 异步API相关的扩展配置
##############################################

[mds_client.async_api]
# 异步队列的大小 (可缓存的消息数量)
asyncQueueSize = 100000
# 是否优先使用大页内存来创建异步队列
isHugepageAble = yes
# 是否启动独立的回调线程来执行回调处理 (否则将直接在通信线程下执行回调处理)
isAsyncCallbackAble = yes
# 是否使用忙等待模式 (TRUE:延迟更低但CPU会被100%占用; FALSE:延迟和CPU使用率相对均衡)
isBusyPollAble = yes
# 是否在启动前预创建并校验所有的连接
isPreconnectAble = no
# 是否需要支持对接压缩后的行情数据 (如果可能会对接压缩行情端口, 就将该参数设置为TRUE, 这样就可以同时兼容压缩和非压缩的行情数据)
isCompressible = yes
# 是否启用对UDP行情数据的本地行情订阅和过滤功能 (如果该参数为TRUE, 则允许对UDP行情设置订阅条件, 并在API端完成对行情数据的过滤)
isUdpFilterable = no
# 是否启用内置的查询通道 (TRUE:启动异步API时自动创建内置的查询通道; FALSE:不创建内置的查询通道)
isBuiltinQueryable = yes

# 异步I/O线程配置 (可选配置)
ioThread.enable = no                    # I/O线程的使能标志
ioThread.isOutputSimplify = no          # 是否采用精简模式输出数据
ioThread.isAppendMode = no              # 是否采用追加模式输出数据
ioThread.isIoThreadBusyPollAble = no    # I/O线程是否使用忙等待模式 (仅用于延迟测量场景, 否则I/O线程没有必要使用忙等待模式)
ioThread.autoTimeSyncInterval = 0       # 自动执行时间同步的间隔时间 (单位为秒, 必须启用内置的查询通道才能生效. 小于等于0:不自动执行时间同步)
ioThread.dataOutputFormat = json        # 数据输出格式 (json, csv, binary, none)
# 数据文件路径 (为空:不输出数据; stdout/stderr:标准输出)
ioThread.dataOutputPath = ./mkdata.txt
# 统计信息文件路径 (为空:不输出数据; stdout/stderr:标准输出)
ioThread.statsOutputPath = ./stats.txt


##############################################
# 日志配置
##############################################

[log]
log.root_category = DEBUG, console_log
log.mode=file
log.threshold=TRACE
log.file=./api.log
log.file.max_file_length=300M
log.file.max_backup_index=3

[console_log]
log.mode=console
log.threshold=ERROR


############################################################
# CPU亲和性设置
#
# 配置说明:
# - CPU编号从1开始, CPU编号列表以逗号或空格分割
# - 使能标志 (cpuset.enable), 若未设置则默认启用亲和性设置
# - 默认值 (cpuset.default), CPU亲和性配置的默认值 (默认的CPU绑定配置)
############################################################

[cpuset]
enable = no
default = 1

# 异步API线程的CPU绑定配置
mdsapi_communication = 3
mdsapi_callback = 5
mdsapi_io_thread = 4
